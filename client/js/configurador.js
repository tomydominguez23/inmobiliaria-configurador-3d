/**
 * CONFIGURADOR 3D PRINCIPAL
 * 
 * Clase principal que maneja toda la l√≥gica del configurador 3D
 * Integra el motor 3D, la interfaz de usuario y la gesti√≥n de datos
 */

class Configurador3D {
    constructor() {
        // Referencias a elementos DOM
        this.elements = {
            viewer: document.getElementById('viewer3d'),
            configPanel: document.getElementById('configPanel'),
            costPanel: document.getElementById('costPanel'),
            furnitureGrid: document.getElementById('furnitureGrid'),
            selectedFurnitureList: document.getElementById('selectedFurnitureList'),
            colorCustomizer: document.getElementById('colorCustomizer'),
            totalCost: document.getElementById('totalCost'),
            objectCount: document.getElementById('objectCount')
        };
        
        // Estado del configurador
        this.state = {
            currentRoom: 'living',
            currentCategory: null,
            selectedFurniture: [],
            totalCost: 0,
            isLoading: false,
            activeMode: 'configurador'
        };
        
        // Motor 3D
        this.engine3D = null;
        
        // Configuraci√≥n
        this.config = {
            autoSave: true,
            autoSaveInterval: 30000, // 30 segundos
            maxItems: 50,
            currency: 'CLP'
        };
        
        // Callbacks
        this.onConfigurationChanged = null;
        this.onCostUpdated = null;
        
        this.init();
    }
    
    /**
     * Inicializaci√≥n principal
     */
    async init() {
        console.log('üè† Inicializando Configurador 3D...');
        
        try {
            // Mostrar loader
            this.showLoader();
            
            // Inicializar motor 3D
            await this.initEngine3D();
            
            // Configurar interfaz
            this.setupUI();
            
            // Cargar datos iniciales
            this.loadInitialData();
            
            // Configurar eventos
            this.setupEventListeners();
            
            // Auto-guardado
            if (this.config.autoSave) {\n                this.setupAutoSave();\n            }\n            \n            // Ocultar loader\n            this.hideLoader();\n            \n            console.log('‚úÖ Configurador 3D inicializado correctamente');\n            \n        } catch (error) {\n            console.error('‚ùå Error inicializando Configurador 3D:', error);\n            this.showError('Error al inicializar el configurador');\n        }\n    }\n    \n    /**\n     * Inicializar motor 3D\n     */\n    async initEngine3D() {\n        if (!this.elements.viewer) {\n            throw new Error('Elemento viewer3d no encontrado');\n        }\n        \n        this.engine3D = new Engine3D(this.elements.viewer);\n        \n        // Configurar callbacks del motor 3D\n        this.engine3D.onObjectSelected = (object) => {\n            this.onObjectSelected(object);\n        };\n        \n        this.engine3D.onObjectMoved = (object) => {\n            this.onObjectMoved(object);\n        };\n        \n        this.engine3D.onSceneUpdated = () => {\n            this.updateUI();\n        };\n        \n        // Esperar a que est√© listo\n        return new Promise((resolve) => {\n            const checkReady = () => {\n                if (this.engine3D.isInitialized) {\n                    resolve();\n                } else {\n                    setTimeout(checkReady, 100);\n                }\n            };\n            checkReady();\n        });\n    }\n    \n    /**\n     * Configurar interfaz de usuario\n     */\n    setupUI() {\n        // Cargar cat√°logo de muebles\n        this.loadFurnitureCatalog();\n        \n        // Configurar filtros\n        this.setupFilters();\n        \n        // Configurar tabs de habitaciones\n        this.setupRoomTabs();\n        \n        // Configurar personalizador de colores\n        this.setupColorCustomizer();\n        \n        // Configurar calculadora de costos\n        this.setupCostCalculator();\n    }\n    \n    /**\n     * Cargar cat√°logo de muebles\n     */\n    loadFurnitureCatalog() {\n        if (!this.elements.furnitureGrid) return;\n        \n        const categories = FurnitureData.getCategories();\n        let html = '';\n        \n        // Cargar todas las categor√≠as inicialmente\n        categories.forEach(category => {\n            const items = FurnitureData.getByCategory(category.id);\n            \n            Object.values(items).forEach(item => {\n                html += this.createFurnitureItemHTML(item);\n            });\n        });\n        \n        this.elements.furnitureGrid.innerHTML = html;\n        \n        // Configurar drag & drop\n        this.setupDragAndDrop();\n    }\n    \n    /**\n     * Crear HTML para un item de mueble\n     */\n    createFurnitureItemHTML(item) {\n        const formattedPrice = this.formatPrice(item.price);\n        \n        return `\n            <div class=\"furniture-item\" \n                 data-id=\"${item.id}\"\n                 data-category=\"${item.category}\"\n                 data-price=\"${item.price}\"\n                 draggable=\"true\">\n                \n                <div class=\"furniture-icon\">\n                    ${this.getCategoryIcon(item.category)}\n                </div>\n                \n                <div class=\"furniture-name\">${item.name}</div>\n                <div class=\"furniture-price\">${formattedPrice}</div>\n                \n                <div class=\"furniture-rating\">\n                    ${this.createStarRating(item.rating)}\n                    <span class=\"review-count\">(${item.reviews})</span>\n                </div>\n                \n                <div class=\"furniture-actions\">\n                    <button class=\"btn-add\" onclick=\"configurador.addFurnitureToScene('${item.id}')\">\n                        ‚ûï Agregar\n                    </button>\n                    <button class=\"btn-info\" onclick=\"configurador.showFurnitureDetails('${item.id}')\">\n                        ‚ÑπÔ∏è Info\n                    </button>\n                </div>\n            </div>\n        `;\n    }\n    \n    /**\n     * Configurar filtros de b√∫squeda\n     */\n    setupFilters() {\n        const searchInput = document.getElementById('furnitureSearch');\n        const categoryFilter = document.getElementById('categoryFilter');\n        const priceFilter = document.getElementById('priceFilter');\n        \n        if (searchInput) {\n            searchInput.addEventListener('input', (e) => {\n                this.filterFurniture({ search: e.target.value });\n            });\n        }\n        \n        if (categoryFilter) {\n            categoryFilter.addEventListener('change', (e) => {\n                this.filterFurniture({ category: e.target.value });\n            });\n        }\n        \n        if (priceFilter) {\n            priceFilter.addEventListener('change', (e) => {\n                this.filterFurniture({ priceRange: e.target.value });\n            });\n        }\n    }\n    \n    /**\n     * Filtrar muebles seg√∫n criterios\n     */\n    filterFurniture(filters) {\n        let filteredItems = [];\n        \n        // Obtener todos los muebles\n        const categories = FurnitureData.getCategories();\n        categories.forEach(category => {\n            const items = FurnitureData.getByCategory(category.id);\n            filteredItems = filteredItems.concat(Object.values(items));\n        });\n        \n        // Aplicar filtros\n        if (filters.search) {\n            filteredItems = FurnitureData.search(filters.search);\n        }\n        \n        if (filters.category) {\n            filteredItems = filteredItems.filter(item => item.category === filters.category);\n        }\n        \n        if (filters.priceRange) {\n            const [min, max] = filters.priceRange.split('-').map(p => \n                p === '' ? Infinity : parseInt(p.replace('+', ''))\n            );\n            filteredItems = filteredItems.filter(item => \n                item.price >= (min || 0) && item.price <= (max || Infinity)\n            );\n        }\n        \n        // Actualizar grid\n        let html = '';\n        filteredItems.forEach(item => {\n            html += this.createFurnitureItemHTML(item);\n        });\n        \n        this.elements.furnitureGrid.innerHTML = html;\n        this.setupDragAndDrop();\n    }\n    \n    /**\n     * Configurar tabs de habitaciones\n     */\n    setupRoomTabs() {\n        const roomTabs = document.querySelectorAll('.room-tab');\n        \n        roomTabs.forEach(tab => {\n            tab.addEventListener('click', () => {\n                // Remover active de todos los tabs\n                roomTabs.forEach(t => t.classList.remove('active'));\n                \n                // Activar tab seleccionado\n                tab.classList.add('active');\n                \n                // Cambiar habitaci√≥n\n                const room = tab.dataset.room;\n                this.changeRoom(room);\n            });\n        });\n    }\n    \n    /**\n     * Cambiar habitaci√≥n activa\n     */\n    changeRoom(room) {\n        this.state.currentRoom = room;\n        \n        // Aqu√≠ podr√≠as cambiar la vista 3D a la habitaci√≥n espec√≠fica\n        console.log(`üè† Cambiando a habitaci√≥n: ${room}`);\n        \n        // Filtrar muebles relevantes para la habitaci√≥n\n        this.filterFurnitureByRoom(room);\n        \n        this.showNotification(`Habitaci√≥n cambiada: ${this.getRoomName(room)}`);\n    }\n    \n    /**\n     * Obtener nombre de habitaci√≥n\n     */\n    getRoomName(room) {\n        const roomNames = {\n            living: 'Sala de Estar',\n            dining: 'Comedor',\n            bedroom1: 'Dormitorio Principal',\n            bedroom2: 'Dormitorio 2',\n            kitchen: 'Cocina'\n        };\n        return roomNames[room] || room;\n    }\n    \n    /**\n     * Configurar drag & drop\n     */\n    setupDragAndDrop() {\n        const furnitureItems = document.querySelectorAll('.furniture-item');\n        \n        furnitureItems.forEach(item => {\n            item.addEventListener('dragstart', (e) => {\n                e.dataTransfer.setData('text/plain', item.dataset.id);\n                item.classList.add('dragging');\n            });\n            \n            item.addEventListener('dragend', () => {\n                item.classList.remove('dragging');\n            });\n        });\n        \n        // Configurar drop zone (visor 3D)\n        if (this.elements.viewer) {\n            this.elements.viewer.addEventListener('dragover', (e) => {\n                e.preventDefault();\n            });\n            \n            this.elements.viewer.addEventListener('drop', (e) => {\n                e.preventDefault();\n                const furnitureId = e.dataTransfer.getData('text/plain');\n                \n                // Calcular posici√≥n de drop\n                const rect = this.elements.viewer.getBoundingClientRect();\n                const x = ((e.clientX - rect.left) / rect.width) * 2 - 1;\n                const y = -((e.clientY - rect.top) / rect.height) * 2 + 1;\n                \n                this.addFurnitureToScene(furnitureId, { x, y });\n            });\n        }\n    }\n    \n    /**\n     * Agregar mueble a la escena 3D\n     */\n    async addFurnitureToScene(furnitureId, dropPosition = null) {\n        try {\n            const furnitureData = FurnitureData.getById(furnitureId);\n            \n            if (!furnitureData) {\n                throw new Error(`Mueble no encontrado: ${furnitureId}`);\n            }\n            \n            // Validar l√≠mite de objetos\n            if (this.state.selectedFurniture.length >= this.config.maxItems) {\n                this.showError(`L√≠mite m√°ximo de ${this.config.maxItems} objetos alcanzado`);\n                return;\n            }\n            \n            this.showLoading(`Agregando ${furnitureData.name}...`);\n            \n            // Calcular posici√≥n\n            let position = new THREE.Vector3(0, 0, 0);\n            \n            if (dropPosition) {\n                // Convertir coordenadas de pantalla a mundo 3D\n                position = this.screenToWorld(dropPosition.x, dropPosition.y);\n            } else {\n                // Posici√≥n aleatoria\n                position.set(\n                    (Math.random() - 0.5) * 10,\n                    0,\n                    (Math.random() - 0.5) * 10\n                );\n            }\n            \n            // Preparar datos para el motor 3D\n            const sceneData = {\n                ...furnitureData,\n                position: position,\n                scale: 1,\n                rotation: new THREE.Euler(0, 0, 0)\n            };\n            \n            // Agregar al motor 3D\n            const model = await this.engine3D.addFurniture(sceneData);\n            \n            // Agregar al estado\n            const selectedItem = {\n                id: furnitureData.id,\n                name: furnitureData.name,\n                price: furnitureData.price,\n                category: furnitureData.category,\n                position: position,\n                timestamp: Date.now(),\n                model: model\n            };\n            \n            this.state.selectedFurniture.push(selectedItem);\n            \n            // Actualizar UI\n            this.updateSelectedFurnitureList();\n            this.updateCostSummary();\n            this.updateStats();\n            \n            this.hideLoading();\n            this.showNotification(`‚úÖ ${furnitureData.name} agregado`);\n            \n            // Callback\n            if (this.onConfigurationChanged) {\n                this.onConfigurationChanged(this.state);\n            }\n            \n        } catch (error) {\n            console.error('Error agregando mueble:', error);\n            this.hideLoading();\n            this.showError(`Error agregando mueble: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Convertir coordenadas de pantalla a mundo 3D\n     */\n    screenToWorld(screenX, screenY) {\n        if (!this.engine3D || !this.engine3D.camera) {\n            return new THREE.Vector3(0, 0, 0);\n        }\n        \n        const raycaster = new THREE.Raycaster();\n        const mouse = new THREE.Vector2(screenX, screenY);\n        \n        raycaster.setFromCamera(mouse, this.engine3D.camera);\n        \n        // Intersecci√≥n con el piso (plano Y = 0)\n        const plane = new THREE.Plane(new THREE.Vector3(0, 1, 0), 0);\n        const intersection = new THREE.Vector3();\n        \n        if (raycaster.ray.intersectPlane(plane, intersection)) {\n            return intersection;\n        }\n        \n        return new THREE.Vector3(0, 0, 0);\n    }\n    \n    /**\n     * Actualizar lista de muebles seleccionados\n     */\n    updateSelectedFurnitureList() {\n        if (!this.elements.selectedFurnitureList) return;\n        \n        if (this.state.selectedFurniture.length === 0) {\n            this.elements.selectedFurnitureList.innerHTML = `\n                <div class=\"empty-state\">\n                    <div class=\"empty-icon\">üì¶</div>\n                    <div class=\"empty-text\">No hay muebles seleccionados</div>\n                    <div class=\"empty-hint\">Arrastra muebles desde el cat√°logo</div>\n                </div>\n            `;\n            return;\n        }\n        \n        let html = '';\n        \n        this.state.selectedFurniture.forEach((item, index) => {\n            html += `\n                <div class=\"furniture-list-item\" data-index=\"${index}\">\n                    <div class=\"item-image\">\n                        ${this.getCategoryIcon(item.category)}\n                    </div>\n                    <div class=\"item-details\">\n                        <div class=\"item-name\">${item.name}</div>\n                        <div class=\"item-price\">${this.formatPrice(item.price)}</div>\n                    </div>\n                    <div class=\"item-actions\">\n                        <button class=\"item-action\" onclick=\"configurador.customizeFurniture(${index})\" title=\"Personalizar\">\n                            üé®\n                        </button>\n                        <button class=\"item-action\" onclick=\"configurador.removeFurnitureFromScene(${index})\" title=\"Eliminar\">\n                            üóëÔ∏è\n                        </button>\n                    </div>\n                </div>\n            `;\n        });\n        \n        this.elements.selectedFurnitureList.innerHTML = html;\n    }\n    \n    /**\n     * Remover mueble de la escena\n     */\n    removeFurnitureFromScene(index) {\n        if (index < 0 || index >= this.state.selectedFurniture.length) {\n            return;\n        }\n        \n        const item = this.state.selectedFurniture[index];\n        \n        // Confirmar eliminaci√≥n\n        if (!confirm(`¬øEliminar ${item.name}?`)) {\n            return;\n        }\n        \n        // Remover del motor 3D\n        this.engine3D.removeObject(item.id);\n        \n        // Remover del estado\n        this.state.selectedFurniture.splice(index, 1);\n        \n        // Actualizar UI\n        this.updateSelectedFurnitureList();\n        this.updateCostSummary();\n        this.updateStats();\n        \n        this.showNotification(`üóëÔ∏è ${item.name} eliminado`);\n        \n        // Callback\n        if (this.onConfigurationChanged) {\n            this.onConfigurationChanged(this.state);\n        }\n    }\n    \n    /**\n     * Actualizar resumen de costos\n     */\n    updateCostSummary() {\n        // Calcular costos por categor√≠a\n        const costs = {\n            livingRoom: 0,\n            bedroom: 0,\n            decoration: 0,\n            lighting: 0\n        };\n        \n        this.state.selectedFurniture.forEach(item => {\n            switch (item.category) {\n                case 'sofas':\n                case 'mesas':\n                    costs.livingRoom += item.price;\n                    break;\n                case 'dormitorio':\n                    costs.bedroom += item.price;\n                    break;\n                case 'decoracion':\n                    if (item.subcategory === 'iluminacion') {\n                        costs.lighting += item.price;\n                    } else {\n                        costs.decoration += item.price;\n                    }\n                    break;\n            }\n        });\n        \n        // Actualizar elementos DOM\n        const elements = {\n            livingRoomCost: document.getElementById('livingRoomCost'),\n            bedroomCost: document.getElementById('bedroomCost'),\n            decorationCost: document.getElementById('decorationCost'),\n            lightingCost: document.getElementById('lightingCost'),\n            subtotalCost: document.getElementById('subtotalCost'),\n            shippingCost: document.getElementById('shippingCost'),\n            totalCost: document.getElementById('totalCost')\n        };\n        \n        const subtotal = Object.values(costs).reduce((sum, cost) => sum + cost, 0);\n        const shipping = this.calculateShipping(subtotal);\n        const total = subtotal + shipping;\n        \n        // Actualizar valores\n        if (elements.livingRoomCost) elements.livingRoomCost.textContent = this.formatPrice(costs.livingRoom);\n        if (elements.bedroomCost) elements.bedroomCost.textContent = this.formatPrice(costs.bedroom);\n        if (elements.decorationCost) elements.decorationCost.textContent = this.formatPrice(costs.decoration);\n        if (elements.lightingCost) elements.lightingCost.textContent = this.formatPrice(costs.lighting);\n        if (elements.subtotalCost) elements.subtotalCost.textContent = this.formatPrice(subtotal);\n        if (elements.shippingCost) elements.shippingCost.textContent = this.formatPrice(shipping);\n        if (elements.totalCost) elements.totalCost.textContent = this.formatPrice(total);\n        \n        // Actualizar opciones de financiamiento\n        this.updateFinancingOptions(total);\n        \n        // Guardar en estado\n        this.state.totalCost = total;\n        \n        // Callback\n        if (this.onCostUpdated) {\n            this.onCostUpdated(total, costs);\n        }\n    }\n    \n    /**\n     * Calcular costo de env√≠o\n     */\n    calculateShipping(subtotal) {\n        if (subtotal === 0) return 0;\n        if (subtotal >= 500000) return 0; // Env√≠o gratis sobre $500.000\n        return 29990; // Costo fijo de env√≠o\n    }\n    \n    /**\n     * Actualizar opciones de financiamiento\n     */\n    updateFinancingOptions(total) {\n        const installments6 = document.getElementById('installments6Amount');\n        const installments12 = document.getElementById('installments12Amount');\n        \n        if (installments6) {\n            installments6.textContent = this.formatPrice(Math.round(total / 6));\n        }\n        \n        if (installments12) {\n            // 12 cuotas con 5% de inter√©s\n            const monthlyRate = 0.05 / 12;\n            const monthlyPayment = total * monthlyRate / (1 - Math.pow(1 + monthlyRate, -12));\n            installments12.textContent = this.formatPrice(Math.round(monthlyPayment));\n        }\n    }\n    \n    /**\n     * Actualizar estad√≠sticas\n     */\n    updateStats() {\n        if (this.elements.objectCount) {\n            this.elements.objectCount.textContent = this.state.selectedFurniture.length;\n        }\n        \n        // Actualizar estad√≠sticas del motor 3D\n        if (this.engine3D) {\n            const stats = this.engine3D.getSceneStats();\n            console.log('üìä Estad√≠sticas de escena:', stats);\n        }\n    }\n    \n    /**\n     * Configurar eventos generales\n     */\n    setupEventListeners() {\n        // Eventos de navegaci√≥n\n        const navBtns = document.querySelectorAll('.nav-btn');\n        navBtns.forEach(btn => {\n            btn.addEventListener('click', () => {\n                const mode = btn.dataset.mode;\n                this.switchMode(mode);\n            });\n        });\n        \n        // Eventos de botones principales\n        const saveBtn = document.getElementById('saveBtn');\n        if (saveBtn) {\n            saveBtn.addEventListener('click', () => this.saveConfiguration());\n        }\n        \n        const shareBtn = document.getElementById('shareBtn');\n        if (shareBtn) {\n            shareBtn.addEventListener('click', () => this.shareConfiguration());\n        }\n        \n        // Eventos de herramientas del visor\n        const screenshotBtn = document.getElementById('screenshotTool');\n        if (screenshotBtn) {\n            screenshotBtn.addEventListener('click', () => this.captureScreenshot());\n        }\n        \n        // Eventos de exportaci√≥n\n        const exportBtn = document.getElementById('exportListBtn');\n        if (exportBtn) {\n            exportBtn.addEventListener('click', () => this.exportFurnitureList());\n        }\n        \n        const quoteBtn = document.getElementById('requestQuoteBtn');\n        if (quoteBtn) {\n            quoteBtn.addEventListener('click', () => this.requestQuote());\n        }\n    }\n    \n    /**\n     * Cambiar modo de visualizaci√≥n\n     */\n    switchMode(mode) {\n        // Actualizar estado\n        this.state.activeMode = mode;\n        \n        // Actualizar UI\n        const navBtns = document.querySelectorAll('.nav-btn');\n        navBtns.forEach(btn => {\n            btn.classList.toggle('active', btn.dataset.mode === mode);\n        });\n        \n        // Ejecutar acci√≥n seg√∫n modo\n        switch (mode) {\n            case 'configurador':\n                this.showNotification('üé® Modo Configurador activado');\n                break;\n                \n            case 'tour360':\n                this.openTour360();\n                break;\n                \n            case 'ar':\n                this.openARView();\n                break;\n        }\n    }\n    \n    /**\n     * Abrir tour 360\n     */\n    openTour360() {\n        const modal = document.getElementById('tour360Modal');\n        const iframe = document.getElementById('tour360Frame');\n        \n        if (modal && iframe) {\n            // URL del tour 360 (integraci√≥n con giot hut render 360)\n            iframe.src = 'https://render360.giothut.com/tour/demo';\n            modal.style.display = 'flex';\n            \n            this.showNotification('üîÑ Abriendo Tour 360...');\n        }\n    }\n    \n    /**\n     * Abrir vista AR\n     */\n    openARView() {\n        const modal = document.getElementById('arModal');\n        \n        if (modal) {\n            modal.style.display = 'flex';\n            this.showNotification('üì± Preparando Vista AR...');\n            \n            // Aqu√≠ se inicializar√≠a la c√°mara AR\n            this.initializeAR();\n        }\n    }\n    \n    /**\n     * Formatear precio en pesos chilenos\n     */\n    formatPrice(price) {\n        return new Intl.NumberFormat('es-CL', {\n            style: 'currency',\n            currency: 'CLP',\n            minimumFractionDigits: 0\n        }).format(price);\n    }\n    \n    /**\n     * Obtener icono de categor√≠a\n     */\n    getCategoryIcon(category) {\n        const icons = {\n            sofas: 'üõãÔ∏è',\n            mesas: 'üçΩÔ∏è',\n            dormitorio: 'üõèÔ∏è',\n            decoracion: 'üé®',\n            iluminacion: 'üí°'\n        };\n        return icons[category] || 'üì¶';\n    }\n    \n    /**\n     * Crear rating de estrellas\n     */\n    createStarRating(rating) {\n        const fullStars = Math.floor(rating);\n        const hasHalfStar = rating % 1 !== 0;\n        const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n        \n        let html = '';\n        \n        // Estrellas llenas\n        for (let i = 0; i < fullStars; i++) {\n            html += '‚≠ê';\n        }\n        \n        // Media estrella\n        if (hasHalfStar) {\n            html += '‚≠ê';\n        }\n        \n        // Estrellas vac√≠as\n        for (let i = 0; i < emptyStars; i++) {\n            html += '‚òÜ';\n        }\n        \n        return html;\n    }\n    \n    /**\n     * Mostrar/ocultar loader\n     */\n    showLoader() {\n        const loader = document.getElementById('loader');\n        if (loader) {\n            loader.classList.remove('hidden');\n        }\n    }\n    \n    hideLoader() {\n        const loader = document.getElementById('loader');\n        if (loader) {\n            loader.classList.add('hidden');\n        }\n    }\n    \n    showLoading(message) {\n        // Implementar indicador de carga espec√≠fico\n        console.log('‚è≥', message);\n    }\n    \n    hideLoading() {\n        // Ocultar indicador de carga\n        console.log('‚úÖ Carga completada');\n    }\n    \n    /**\n     * Mostrar notificaciones\n     */\n    showNotification(message, type = 'info') {\n        const container = document.getElementById('toastContainer');\n        if (!container) return;\n        \n        const toast = document.createElement('div');\n        toast.className = `toast toast-${type}`;\n        toast.textContent = message;\n        \n        container.appendChild(toast);\n        \n        // Mostrar con animaci√≥n\n        setTimeout(() => toast.classList.add('show'), 100);\n        \n        // Ocultar despu√©s de 3 segundos\n        setTimeout(() => {\n            toast.classList.remove('show');\n            setTimeout(() => container.removeChild(toast), 300);\n        }, 3000);\n    }\n    \n    showError(message) {\n        this.showNotification(message, 'error');\n    }\n    \n    /**\n     * Guardar configuraci√≥n\n     */\n    saveConfiguration() {\n        try {\n            const config = {\n                id: Date.now().toString(),\n                furniture: this.state.selectedFurniture.map(item => ({\n                    id: item.id,\n                    position: item.position,\n                    rotation: item.rotation || { x: 0, y: 0, z: 0 },\n                    scale: item.scale || 1,\n                    color: item.color || null\n                })),\n                room: this.state.currentRoom,\n                totalCost: this.state.totalCost,\n                timestamp: new Date().toISOString()\n            };\n            \n            // Guardar en localStorage (en producci√≥n ser√≠a una API)\n            const savedConfigs = JSON.parse(localStorage.getItem('configurations') || '[]');\n            savedConfigs.push(config);\n            localStorage.setItem('configurations', JSON.stringify(savedConfigs));\n            \n            this.showNotification(`üíæ Configuraci√≥n guardada (ID: ${config.id.substr(-6)})`);\n            \n            return config.id;\n            \n        } catch (error) {\n            console.error('Error guardando configuraci√≥n:', error);\n            this.showError('Error al guardar la configuraci√≥n');\n        }\n    }\n    \n    /**\n     * Capturar screenshot\n     */\n    captureScreenshot() {\n        if (!this.engine3D) {\n            this.showError('Motor 3D no disponible');\n            return;\n        }\n        \n        try {\n            const dataURL = this.engine3D.captureScreenshot();\n            \n            // Crear enlace de descarga\n            const link = document.createElement('a');\n            link.download = `configurador-3d-${Date.now()}.png`;\n            link.href = dataURL;\n            link.click();\n            \n            this.showNotification('üì∏ Screenshot capturado');\n            \n        } catch (error) {\n            console.error('Error capturando screenshot:', error);\n            this.showError('Error al capturar imagen');\n        }\n    }\n    \n    /**\n     * Exportar lista de muebles\n     */\n    exportFurnitureList() {\n        if (this.state.selectedFurniture.length === 0) {\n            this.showError('No hay muebles para exportar');\n            return;\n        }\n        \n        try {\n            // Crear contenido CSV\n            let csv = 'Nombre,Categor√≠a,Precio,Cantidad\\n';\n            \n            const grouped = {};\n            this.state.selectedFurniture.forEach(item => {\n                if (!grouped[item.id]) {\n                    grouped[item.id] = { ...item, count: 0 };\n                }\n                grouped[item.id].count++;\n            });\n            \n            Object.values(grouped).forEach(item => {\n                csv += `\"${item.name}\",\"${item.category}\",\"${item.price}\",\"${item.count}\"\\n`;\n            });\n            \n            csv += `\\n\"TOTAL\",\"\",\"${this.state.totalCost}\",\"\"\\n`;\n            \n            // Descargar archivo\n            const blob = new Blob([csv], { type: 'text/csv' });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement('a');\n            link.download = `lista-muebles-${Date.now()}.csv`;\n            link.href = url;\n            link.click();\n            \n            URL.revokeObjectURL(url);\n            \n            this.showNotification('üìã Lista exportada exitosamente');\n            \n        } catch (error) {\n            console.error('Error exportando lista:', error);\n            this.showError('Error al exportar lista');\n        }\n    }\n    \n    /**\n     * Cargar datos iniciales\n     */\n    loadInitialData() {\n        // Cargar configuraci√≥n guardada si existe\n        const urlParams = new URLSearchParams(window.location.search);\n        const configId = urlParams.get('config');\n        \n        if (configId) {\n            this.loadConfiguration(configId);\n        }\n    }\n    \n    /**\n     * Configurar auto-guardado\n     */\n    setupAutoSave() {\n        setInterval(() => {\n            if (this.state.selectedFurniture.length > 0) {\n                this.saveConfiguration();\n            }\n        }, this.config.autoSaveInterval);\n    }\n}\n\n// Inicializar configurador cuando el DOM est√© listo\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.configurador = new Configurador3D();\n});\n\n// Hacer disponible globalmente para debugging\nwindow.Configurador3D = Configurador3D;